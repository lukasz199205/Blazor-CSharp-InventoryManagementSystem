@page "/produce"

@using static IMS.WebApp.Controls.Common.AutoCompleteComponent

@inject IViewProductsByNameUseCase ViewProductsByNameUseCase
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IProduceProductUseCase ProduceProductUseCase


<h3>Produce Product</h3>
<br/>

<EditForm Model="produceViewModel" OnValidSubmit="Produce">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="po">Production #</label>
        <InputText id="po" @bind-Value="produceViewModel.ProductionNumber" class="form-control"></InputText>
    </div>
    <br/>
    <div class="card">
        <div class="card-body">
            <div class="form-group">
                <AutoCompleteComponent
                    Label="Product to produce"
                    SearchFunction="SearchProduct"
                    OnItemSelected="OnItemSelected">
                </AutoCompleteComponent>
                <input type="hidden" value="@produceViewModel.ProductId"/>
            </div>
        </div>
    </div>
    <br/>
    <div class="form-group">
        <label for="qty">Quantity</label>
        <InputNumber id="qty" @bind-Value="produceViewModel.QuantityToProduce" class="form-control"></InputNumber>
    </div>
    <br/>
    <button type="submit" class="btn btn-primary">Produce</button>
</EditForm>

@code {
    private ProduceViewModel produceViewModel = new ProduceViewModel();
    private Product? selectedProduct = null;
    
    private List<ItemViewModel>? SearchProduct(string name)
    {
        var list = ViewProductsByNameUseCase.ExecuteAsync(name).GetAwaiter().GetResult();
        if (list == null) return null;

        return list.Select(x => new ItemViewModel { Id = x.ProductId, Name = x.ProductName })?.ToList();
    }

    private async Task OnItemSelected(ItemViewModel item)
    {

        this.selectedProduct = await ViewProductByIdUseCase.ExecuteAsync(item.Id);
        produceViewModel.ProductId = item.Id;
        produceViewModel.Product = this.selectedProduct;
    }

    private async Task Produce()
    {
        await ProduceProductUseCase.ExecuteAsync(this.produceViewModel.ProductionNumber,
            this.selectedProduct,
            this.produceViewModel.QuantityToProduce,
            "Frank");

        produceViewModel = new ProduceViewModel();
        this.selectedProduct = null;
    }
}